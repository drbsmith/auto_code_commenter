"""! @file

# Variable Documenter

documents any global variables in a module, and adds placeholder text lines.

## Dependencies
	* sys, os
	* util.log
	* python_code.CodeBlock
	* python_code.CodeLine


## Functions
	* main

[generated by Auto Code Commenter at 2022-03-14 15:15:49. https://github.com/drbsmith/auto_code_commenter]
@package src"""


import sys, os

from util.log import setup_logging
## logger : handle to global logging
logger = setup_logging()

def DocumentVariables(filename):
	"""!
	TODO_DOC
	- if True will replace any existing variable documentation with new auto-generated lines.
	- check for global variables and see if they have comments
	- it's a root level line. Could it be a variable?

	@param filename: TODO_DOC
	@return TODO_DOC

	## Profile
	* line count: 36
	* characters: 897
	* imports: from python_code.CodeBlock import CodeBlock, from python_code.CodeLine import CodeLine
	"""

	from python_code.CodeBlock import CodeBlock
	from python_code.CodeLine import CodeLine

	## if True will replace any existing variable documentation with new auto-generated lines.
	FORCE = False
	if True in [x == '-force' for x in sys.argv]:
		FORCE = True

	with open(filename, 'r') as f:
		raw = f.read()

	code = CodeBlock.ParsePython(raw)

	write_it = False
	variables = {} # keep track of the first appearence of each one
	# check for global variables and see if they have comments
	for i in range(len(code)-1, 0, -1):
		item = code[i]

		if type(item) is CodeBlock:
			continue
		else:
			# it's a root level line. Could it be a variable?
			x = item.find('=')
			if x > -1 and not CodeLine.inLiteral(item.line, x) and not CodeLine.inComment(item.line, x):
				line = CodeLine.RemoveLeadingWhitespace(item.line)
				var = line[:item.find('=')]

				if not var in variables:
					variables[var] = i

				# is the previous line a comment?
				if i > 0:
					if code[i-1].isComment():
						if FORCE:
							code[i-1] = CodeLine('')
							write_it = True

					if not code[i-1].isComment():
						code.insert(i, CodeLine('## {}: TODO_DOC'.format(var)))
						write_it = True

	# no changes? don't write anything
	if write_it:
		# move original
		os.rename(filename, filename + '.old')
		logger.info('moved original file to {}'.format(filename + '.old'))

		with open(filename, 'w') as f:
			f.write( str(code) )

		logger.info('added new variable documentation lines to {}'.format(filename))
	else:
		logger.info('no changes were made.')

def main():
	if len(sys.argv) < 2:
		logger.error('missing required path to file argument')
		exit()

	filename = sys.argv[1]

	if not os.path.isfile(filename):
		logger.error("{} doesn't exist.".format(filename))
		exit(0)

	DocumentVariables(filename)


if __name__ == '__main__':
	main()






