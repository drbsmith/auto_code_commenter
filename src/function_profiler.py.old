"""! @file

# Code Block

Represents one functional block of code (in python usually indicated with a leading line terminated with a colon ':', and all subsequent lines indented one level).

Q: have one list of all lines/blocks, or split into the 'definition' line and then a list of all sub-items? (the indented lines/blocks)

@package python"""

# from util.util_parsing import StripTrailingWhitespace, StripLeadingWhitespace, IsComment
from python_code.CodeLine import CodeLine

def ProfileFunction(code_lines):
	if len(code_lines) < 1:
		return None
	
	# put together a little dict/statement describing the supplied code.
	out_dict = {}

	# how many lines? Drop any empty lines, they don't count!
	out_dict['line count'] = code_lines.getTotalLines() #len([c for c in code_lines if c != ''])

	# how many bytes?
	# lengths = [len(line) for line in code_lines]
	out_dict['characters'] = code_lines.getTotalBytes() # sum(lengths)

	# does it return anything?
	returns = code_lines.getReturns()

	# does it import anything?
	imports = code_lines.getImports()
	# for line in code_lines:
	# 	if 'import' in line and not IsComment(line):
	# 		# what?
	# 		imports.append(StripLeadingWhitespace(line))
	# 	if 'return' in line and not IsComment(line):
	# 		returns.append(StripLeadingWhitespace(line.replace('return', '')))

	if imports:
		out_dict['imports'] = [CodeLine.RemoveLeadingWhitespace(i) for i in imports]
	if returns:
		out_dict['returns'] = [CodeLine.RemoveLeadingWhitespace(r) for r in returns]

	# TODO: find any internal variables??
	# ...

	# TODO: find function calls out?
	# TODO: some estimate of complexity?

	return out_dict

def _list2str(x):
	out = ""

	for y in x:
		out += '{}, '.format(y)

	return out[:-2]

def ProfileDictToLines(profile_dict):
	if profile_dict is None:
		return None	

	from python_code.CodeLine import CodeLine

	# convert each entry to a line of text
	ret = [CodeLine(''), CodeLine('## Profile')]
	for k in profile_dict.keys():
		if not type(profile_dict[k]) is list:
			ret.append(CodeLine('* {}: {}'.format(k, str(profile_dict[k]))))
		else:
			ret.append(CodeLine('* {}: {}'.format(k, _list2str(profile_dict[k]))))

	return ret